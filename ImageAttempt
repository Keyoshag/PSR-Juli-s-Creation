import tkinter as tk  # Importing tkinter module for GUI elements
from tkinter import messagebox  # Importing messagebox for error dialogs
from PIL import Image, ImageTk  # Importing PIL for image processing
from datetime import datetime  # Importing datetime for date validation

# main window class
class WeddingCakeApp:
    def __init__(self, root):
        # Initialize the main window
        self.root = root
        self.root.title("Juli's Creations - Wedding Cake Ordering System")
        self.create_main_window()

    def create_main_window(self):
        # Main window elements
        tk.Label(self.root, text="Wedding Cake Ordering System").grid(row=0, columnspan=2)

        tk.Label(self.root, text="Wedding Date (MM-DD-YYYY):").grid(row=1, column=0)
        self.date_entry = tk.Entry(self.root)
        self.date_entry.grid(row=1, column=1)

        tk.Label(self.root, text="Number of Guests:").grid(row=2, column=0)
        self.guests_entry = tk.Entry(self.root)
        self.guests_entry.grid(row=2, column=1)

        tk.Label(self.root, text="Color Scheme:").grid(row=3, column=0)
        self.color_entry = tk.Entry(self.root)
        self.color_entry.grid(row=3, column=1)

        tk.Label(self.root, text="Cake Flavor(s):").grid(row=4, column=0)
        self.flavor_entry = tk.Entry(self.root)
        self.flavor_entry.grid(row=4, column=1)

        tk.Label(self.root, text="Desired Frosting Type:").grid(row=5, column=0)
        self.frosting_entry = tk.Entry(self.root)
        self.frosting_entry.grid(row=5, column=1)

        tk.Label(self.root, text="Cake Decorations:").grid(row=6, column=0)
        self.decorations_entry = tk.Entry(self.root)
        self.decorations_entry.grid(row=6, column=1)

        # Submit and reset buttons
        tk.Button(self.root, text="Submit", command=self.calculate_cost).grid(row=7, column=0)
        tk.Button(self.root, text="Reset", command=self.reset_entries).grid(row=7, column=1)

        # Adding an image to the main window
        self.add_image(self.root, "/mnt/data/main.png", 8, 0, "Wedding Cake Example")

    def reset_entries(self):
        # Clear all the input fields
        self.date_entry.delete(0, tk.END)
        self.guests_entry.delete(0, tk.END)
        self.color_entry.delete(0, tk.END)
        self.flavor_entry.delete(0, tk.END)
        self.frosting_entry.delete(0, tk.END)
        self.decorations_entry.delete(0, tk.END)

    def calculate_cost(self):
        # Input validation
        date = self.date_entry.get()
        guests = self.guests_entry.get()
        flavor = self.flavor_entry.get()
        customizations = 0  # Initialize the customizations count

        # Validate wedding date
        try:
            selected_date = datetime.strptime(date, "%m-%d-%Y")
            if selected_date <= datetime.now():
                raise ValueError("We can only service wedding requests in the future.")
        except ValueError as e:
            messagebox.showerror("Invalid input", str(e))
            return

        # Validate number of guests
        try:
            guests = int(guests)
            if guests <= 0:
                raise ValueError("Please enter a positive number for the number of guests.")
        except ValueError as e:
            messagebox.showerror("Invalid input", str(e))
            return

        # Validate cake flavor(s)
        if not flavor:
            messagebox.showerror("Invalid input", "Please enter at least one cake flavor.")
            return

        # Calculating costs
        flavors_count = len(flavor.split(','))  # Count the number of flavors
        if flavors_count == 1:
            flavor_cost = 80
        elif flavors_count == 2:
            flavor_cost = 100
        else:
            flavor_cost = 150

        # Calculate the number of customizations
        if self.color_entry.get():
            customizations += 1
        if self.frosting_entry.get():
            customizations += 1
        if self.decorations_entry.get():
            customizations += 1

        customization_cost = customizations * 30  # Cost for customizations

        # Recommend the number of tiers based on the number of guests
        if guests <= 50:
            tiers = 2
        elif 51 <= guests <= 100:
            tiers = 3
        else:
            tiers = 4

        tiers_cost = tiers * 25
        total_cost = flavor_cost + customization_cost + tiers_cost

        # Display a confirmation with order details
        message = (f"Order Details:\n\nWedding Date: {date}\nNumber of Guests: {guests}\n"
                   f"Recommended Number of Tiers: {tiers}\nCake Flavor(s): {flavor}\n"
                   f"Flavor Cost: ${flavor_cost}\nCustomization Cost: ${customization_cost}\n"
                   f"Tiers Cost: ${tiers_cost}\nTotal Estimated Cost: ${total_cost}\n\n"
                   "Do you confirm this order?")

        response = messagebox.askyesno("Confirm Order", message)
        if response:
            self.show_confirmation(date, guests, tiers, flavor, flavor_cost, customization_cost, tiers_cost, total_cost)

    def show_confirmation(self, date, guests, tiers, flavor, flavor_cost, customization_cost, tiers_cost, total_cost):
        # Create a new window for confirmation
        confirmation_window = tk.Toplevel(self.root)
        confirmation_window.title("Order Confirmation")

        # Display order details in the confirmation window
        tk.Label(confirmation_window, text="Order Confirmation").grid(row=0, columnspan=2)

        tk.Label(confirmation_window, text="Wedding Date:").grid(row=1, column=0)
        tk.Label(confirmation_window, text=date).grid(row=1, column=1)

        tk.Label(confirmation_window, text="Number of Guests:").grid(row=2, column=0)
        tk.Label(confirmation_window, text=guests).grid(row=2, column=1)

        tk.Label(confirmation_window, text="Recommended Number of Tiers:").grid(row=3, column=0)
        tk.Label(confirmation_window, text=tiers).grid(row=3, column=1)

        tk.Label(confirmation_window, text="Cake Flavor(s):").grid(row=4, column=0)
        tk.Label(confirmation_window, text=flavor).grid(row=4, column=1)

        tk.Label(confirmation_window, text="Flavor Cost:").grid(row=5, column=0)
        tk.Label(confirmation_window, text=f"${flavor_cost}").grid(row=5, column=1)

        tk.Label(confirmation_window, text="Customization Cost:").grid(row=6, column=0)
        tk.Label(confirmation_window, text=f"${customization_cost}").grid(row=6, column=1)

        tk.Label(confirmation_window, text="Tiers Cost:").grid(row=7, column=0)
        tk.Label(confirmation_window, text=f"${tiers_cost}").grid(row=7, column=1)

        tk.Label(confirmation_window, text="Total Estimated Cost:").grid(row=8, column=0)
        tk.Label(confirmation_window, text=f"${total_cost}").grid(row=8, column=1)

        tk.Label(confirmation_window, text="Final costing will be confirmed directly through the bakery.").grid(row=9, columnspan=2)

        tk.Button(confirmation_window, text="Close", command=confirmation_window.destroy).grid(row=10, columnspan=2)

        # Adding an image to the confirmation window
        self.add_image(confirmation_window, "/mnt/data/Confirmation.png", 11, 0, "Confirmation Example")

    def add_image(self, parent, path, row, column, alt_text):
        # Load and resize image, then display in the given parent widget
        try:
            image = Image.open(path)
            image = image.resize((300, 200), Image.ANTIALIAS)
            photo = ImageTk.PhotoImage(image)
            label = tk.Label(parent, image=photo, text=alt_text, compound='top')
            label.image = photo
            label.grid(row=row, column=column, columnspan=2)
        except Exception as e:
            messagebox.showerror("Image Error", f"Failed to load image: {e}")

if __name__ == "__main__":
    root = tk.Tk()  # Create the root window
    app = WeddingCakeApp(root)  # Create an instance of the WeddingCakeApp
    root.mainloop()  # Start the Tkinter event loop
